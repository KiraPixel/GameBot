import discord
from discord.ext import commands
from discord import Member
from discord.ext.commands import has_permissions, MissingPermissions
from config import settings
from discord.utils import get
from asyncio import sleep
import sqlite3 as sq
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
#import datetime
from datetime import timedelta
from datetime import datetime
import re
import operator
import random

with sq.connect('DataBase.db') as con:
    cur = con.cursor()

    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        discord_id INT NOT NULL,
        date_registrator TEXT NOT NULL,
        name TEXT NOT NULL,
        groups INT DEFAULT 0,
        race TEXT NOT NULL,
        validate BOOL DEFAULT TRUE,
        ad BOOL DEFAULT FALSE
        )""")

    cur.execute("""CREATE TABLE IF NOT EXISTS groups (
        group_id INTEGER PRIMARY KEY,
        owner_id INT NOT NULL,
        group_date_registrator TEXT NOT NULL,
        group_name TEXT NOT NULL,
        group_race TEXT NOT NULL,
        group_chat_id INT
        )""")

    cur.execute("""CREATE TABLE IF NOT EXISTS item (
        "item_id"   INTEGER DEFAULT 0 PRIMARY KEY,
        "item_name" TEXT DEFAULT null,
        "item_type" TEXT DEFAULT null,
        "item_price"    INT DEFAULT 0,
        "iteam_attak"   INT DEFAULT 0,
        "item_luck" INT DEFAULT 0,
        "item_hp"   INT DEFAULT 0,
        "item_lvl"  INT DEFAULT 0
        )""")

    cur.execute("""CREATE TABLE IF NOT EXISTS inv (
        "inv_id"    INTEGER DEFAULT 0 PRIMARY KEY,
        "inv_sharp" INT DEFAULT 0,
        "inv_owner_id" INT,
        "inv_name"  TEXT DEFAULT null,
        "inv_type"  TEXT DEFAULT null,
        "inv_price" INT DEFAULT 0,
        "inv_attak" INT DEFAULT 0,
        "inv_luck"  INT DEFAULT 0,
        "inv_hp"    INT DEFAULT 0,
        "inv_lvl"   INT DEFAULT 0
        )""")

    cur.execute("""CREATE TABLE IF NOT EXISTS char (
        user_id INT NOT NULL,
        atack INT DEFAULT 1,
        defens INT DEFAULT 1,
        exp INT DEFAULT 10,
        level INT DEFAULT 1,
        hp INT DEFAULT 10,
        max_hp INT DEFAULT 10,
        coins INT DEFAULT 0,
        slot_first_hand INT DEFAULT 0,
        slot_second_hand INT DEFAULT 0,
        slot_head INT DEFAULT 0,
        slot_foots INT DEFAULT 0,
        slot_chest INT DEFAULT 0,
        slot_pants INT DEFAULT 0
        )""")
    
    cur.execute("""CREATE TABLE IF NOT EXISTS battle (

        race TEXT NOT NULL,
        deffens INT DEFAULT 0,
        driadas_atack INT DEFAULT 0,
        dragons_atack INT DEFAULT 0,
        neko_atack INT DEFAULT 0,
        people_atack INT DEFAULT 0,
        kubky INT DEFAULT 0     

        )""")

    con.commit()





intents = discord.Intents.all()
bot = commands.Bot(command_prefix = settings['prefix'], intents = intents) #–ø—Ä–æ–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
#@commands.has_permissions( administrator = True )





def neeewlvl(member_id):
    print(member_id)

    cur = con.cursor()
    cur.execute(f"SELECT user_id, level, exp FROM char WHERE user_id = (SELECT id FROM users WHERE discord_id = {member_id})") #–ü–æ–ª—É—á–∞–µ–º user_id, level, exp
    record = cur.fetchall()

    print(f"{datetime.now()} –ü—Ä–æ—Å—á–µ—Ç –õ–í–õ | ID: {record[0][0]} LVL: {record[0][1]} EXP: {record[0][2]} –°–ª–µ–¥—É—é—â–∏–π –ª–≤–ª: {record[0][1] + 1}") #–ü–†–ò–ù–¢–´

    cur.execute(f"SELECT MAX(exp_lvl), exp_exp FROM exp WHERE exp_exp <= {record[0][2]}") #–ü—Ä–æ—Å—á–µ—Ç –æ–ø—ã—Ç–∞ –∏ –ª–≤–ª
    record2 = cur.fetchall()

    if record[0][1] != record2[0][0]: #–ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–≤–ª —É–∂–µ —Ä–∞–≤–µ–Ω –ø—Ä–æ—Å—á–µ—Ç—É, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        cur.execute(f"UPDATE char SET level = {record2[0][0]} WHERE user_id = {record[0][0]}") #–≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–≤–ª
        con.commit()





@bot.command() #–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@has_permissions(administrator = True)
async def ml(ctx):
    member_id = ctx.message.author.id
    neeewlvl(member_id)
    





async def battle():
    with sq.connect('DataBase.db') as con:
        cur = con.cursor()
        bebra = cur.execute(f"SELECT * FROM battle")
        Direction = {"–î—Ä–∏–∞–¥—ã": [0, 0, "", 0, " "], "–î—Ä–∞–∫–æ–Ω—ã": [0, 0, "", 0, " "], "–ó–≤–µ—Ä–æ–ª—é–¥–∏": [0, 0, "", 0, ""], "–õ—é–¥–∏": [0, 0, "", 0, ""]} #–ó–∞–¥–∞—é —Å–ª–æ–≤–∞—Ä—å, –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–ø–æ—Ä—Ç–∞.
        for hl in bebra: #–û–±—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∏—Ç–≤—ã –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            high = max(hl[1], hl[2], hl[3], hl[4])
            win = hl.index(high)
            if win == 1: #–ï—Å–ª–∏ –¥–µ—Ñ–µ—Ä—ã –ø–æ–±–µ–¥–∏–ª–∏
                Direction[str(hl[0])][0] += 1
                Direction[str(hl[0])][1] += high*2
                Direction[str(hl[0])][2] = "üõ°Ô∏è–î–µ—Ñ"
                Direction[str(hl[0])][3] = high*2
            else: #–ï—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª–∞ –∞—Ç–∞–∫–∞
                if win == 2: #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º—É –æ—Ç–¥–∞—Ç—å —Ä–∞—É–Ω–¥
                    Direction["–î—Ä–∏–∞–¥—ã"][0] += 1
                    Direction[str(hl[0])][2] = "üçÄ–î—Ä–∏–∞–¥—ã"
                elif win == 3:
                    Direction["–î—Ä–∞–∫–æ–Ω—ã"][0] += 1
                    Direction[str(hl[0])][2] = "üêâ–î—Ä–∞–∫–æ–Ω—ã"
                elif win == 4:
                    Direction["–ó–≤–µ—Ä–æ–ª—é–¥–∏"][0] += 1
                    Direction[str(hl[0])][2] = "üê±–ó–≤–µ—Ä–æ–ª—é–¥–∏"
                elif win == 5:
                    Direction["–õ—é–¥–∏"][0] += 1
                    Direction[str(hl[0])][2] = "üßô–õ—é–¥–∏"
                else: 
                    print(f"NaN\n -----------------------------------------------------------")
                Direction[str(hl[0])][3] = high*2
                n = 2
                for i in Direction: #–ü—Ä–æ—Å—á–µ—Ç –ø—Ä–µ–¥–≤–∞–¥–∏—Ç–µ–ª—å–Ω—ã—Ö (—á–∏—Å—Ç—ã—Ö) –æ—á–∫–æ–≤, –±–µ–∑ –±–æ–Ω—É—Å–∞.
                    Direction[i][1] += hl[n]*2
                    n += 1
        b = 0
        smile = ["üçÄ", "üêâ", "üê±", "üßô"] #–î–æ–ø —Å–ø–∏—Å–æ–∫, –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–º–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ—Ä—Ç–µ
        for hl in Direction: #–ü–æ–º–æ—â—å –≤ –≤—ã–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∏—Ç–≤—ã(–¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞)
            if Direction[hl][2] == "üõ°Ô∏è–î–µ—Ñ":
                a = Direction[hl]
                Direction[hl][4] = f"üõ°Ô∏è–ó–∞—â–∏—Ç–∞ {smile[b]}{hl} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞—â–∏—Ç–∞ –æ—Ç—Ä–∞–∑–∏–ª–∞ –Ω–∞—Ç–∏—Å–∫ –∞—Ç–∞–∫–∏."
            else:
                a = Direction[hl]
                Direction[hl][4] = f"‚öîÔ∏è–ë–∏—Ç–≤–∞ –∑–∞ {smile[b]}{hl} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö - –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –ø–æ–¥ –Ω–∞—Ç–∏—Å–∫–æ–º –∞—Ç–∞–∫–∏."
            b += 1
        battle_top = {"–ó–≤–µ—Ä–æ–ª—é–¥–∏": [0, ''], "–õ—é–¥–∏": [0, ''], "–î—Ä–∞–∫–æ–Ω—ã": [0, ''], "–î—Ä–∏–∞–¥—ã": [0, ''],}
        for i in Direction: #–æ–±—Å—á–µ—Ç –∫—É–±–∫–æ–≤ –∑–∞ –±–∏—Ç–≤—É(—Å –±–æ–Ω—É—Å–∞–º–∏), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É–±–∫–æ–≤ —Ñ—Ä–∞–∫—Ü–∏—è–º
            if Direction[i][0] == 2:
                kubki = round(Direction[i][1] * 1.2)
                battle_top[i][1] = " (—Ö1.2)"
            elif Direction[i][0] == 3:
                kubki = round(Direction[i][1] * 1.5)
                battle_top[i][1] = " (—Ö1.5)" 
            elif Direction[i][0] == 4:
                kubki = round(Direction[i][1] * 2)
                battle_top[i][1] = " (—Ö2)" 
            else:
                kubki = round(Direction[i][1] * 1)
            battle_top[i][0] = kubki
            cur.execute(f"UPDATE battle SET kubky = kubky + {kubki} WHERE race = '{i}'") 
        sorted_battle_top = sorted(battle_top.items(), key=operator.itemgetter(1)) #–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞(–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø–∞)
        top_fraction = f"1. {sorted_battle_top[3][0]} - {sorted_battle_top[3][1][0]}üèÜ{sorted_battle_top[3][1][1]}\n2. {sorted_battle_top[2][0]} - {sorted_battle_top[2][1][0]}üèÜ{sorted_battle_top[2][1][1]}\n3. {sorted_battle_top[1][0]} - {sorted_battle_top[1][1][0]}üèÜ{sorted_battle_top[1][1][1]}\n4. {sorted_battle_top[0][0]} - {sorted_battle_top[0][1][0]}üèÜ{sorted_battle_top[0][1][1]}"             
        record = cur.fetchall() #–≠–º–±–µ–¥-—Ä–µ–ø–æ—Ä—Ç –æ –±–∏—Ç–≤–µ
        reports = bot.get_channel(890280293620150312) #–∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–º–±–µ–¥–∞
        embed = discord.Embed(
            title = f'–ë–ò–¢–í–ê –Ω–∞ {datetime.now().hour} —á–∞—Å–æ–≤\n\n',
            description = f'{Direction["–î—Ä–∏–∞–¥—ã"][4]}\n–†–∞—É–Ω–¥ –∑–∞: {Direction["–î—Ä–∏–∞–¥—ã"][2]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–∞–±—Ä–∞–ª–∏: {Direction["–î—Ä–∏–∞–¥—ã"][3]}üèÜ\n\n{Direction["–î—Ä–∞–∫–æ–Ω—ã"][4]}\n–†–∞—É–Ω–¥ –∑–∞: {Direction["–î—Ä–∞–∫–æ–Ω—ã"][2]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–∞–±—Ä–∞–ª–∏: {Direction["–î—Ä–∞–∫–æ–Ω—ã"][3]}üèÜ\n\n{Direction["–ó–≤–µ—Ä–æ–ª—é–¥–∏"][4]}\n–†–∞—É–Ω–¥ –∑–∞: {Direction["–ó–≤–µ—Ä–æ–ª—é–¥–∏"][2]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–∞–±—Ä–∞–ª–∏: {Direction["–ó–≤–µ—Ä–æ–ª—é–¥–∏"][3]}üèÜ\n\n{Direction["–õ—é–¥–∏"][4]}\n–†–∞—É–Ω–¥ –∑–∞: {Direction["–õ—é–¥–∏"][2]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–∞–±—Ä–∞–ª–∏: {Direction["–õ—é–¥–∏"][3]}üèÜ\n\n–¢–û–ü –§–†–ê–ö–¶–ò–ô:\n{top_fraction}\n',
            colour = discord.Colour.from_rgb(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        )
        await reports.send(embed=embed)
        cur.execute(f"UPDATE battle SET deffens = 0,driadas_atack = 0, neko_atack = 0, people_atack = 0, dragons_atack = 0") 
        con.commit() #–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–¥





@bot.event
async def on_ready():
    print(f"{datetime.now()} Bot —Åonnected to Discord")

    scheduler = AsyncIOScheduler()
    scheduler.add_job(battle, trigger='cron', hour='12', minute='00')
    scheduler.add_job(battle, trigger='cron', hour='16', minute='00')
    scheduler.add_job(battle, trigger='cron', hour='20', minute='00')
    scheduler.start()





@bot.command()
@has_permissions(administrator = True)
async def walk(ctx):
    print(f"{datetime.now()} {ctx.message.author} —Ä–µ—à–∏–ª –ø–æ–π—Ç–∏ –ø–æ–≥—É–ª—è—Ç—å") #–°–µ—Ä—å–µ–∑–Ω–æ? –≠—Ç–æ —Ç–æ–∂–µ?
    member = ctx.message.author
    walk_list = [
        "–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è",
        "–í—ã —É—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Ä–µ—à–∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≥—É–ª—è—Ç—å",
        "–í–∞–º –Ω–∞–¥–æ–µ–ª —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–æ–≥–∏–Ω—è –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–µ—Ç\n –ò –≤—ã —Ä–µ—à–∏–ª–∏ –ø–æ–≥—É–ª—è—Ç—å",
        "–ü–æ–π–¥–µ–º –≥—É–ª—è—Ç—å...",
    ]

    async def walk_time():
        await member.send("hi!")

    date_now = datetime.now()
    five_minut = date_now + timedelta(seconds=60*5)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(walk_time, trigger='cron', minute=five_minut.minute)
    scheduler.start()
    await member.send(random.choice(walk_list))





@bot.command()
@has_permissions(administrator = True)
async def giveitem(ctx, opponent:discord.Member, item_id: str):
    opponent = opponent.id
    with sq.connect('DataBase.db') as con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM item WHERE item_id = '{item_id}'") #–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        record = cur.fetchall()
        cur.execute(f"SELECT * FROM users WHERE discord_id = {opponent}") #–ø—Ä–æ–±–∏–≤–∞–µ–º –æ–ø–ø–µ–Ω–µ–Ω—Ç–∞ 
        record2 = cur.fetchall()
        if len(record) == 0 or len(record2) == 0:    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
            await ctx.send(f"{'–£—á–∞—Å—Ç–Ω–∏–∫' if len(record2) == 0 else 'Item'} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            con.commit()
            return
        cur.execute(f"INSERT INTO inv (inv_owner_id, inv_name, inv_type, inv_price, inv_attak, inv_luck, inv_hp, inv_lvl) VALUES(?, ?, ?, ?, ?, ?, ?, ?)",[record2[0][0], *record[0][1:]]) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –≤—Å—é –∏–Ω—Ñ—É
        con.commit()
    await ctx.send(f"–ü—Ä–µ–¥–º–µ—Ç –≤—ã–¥–∞–Ω")
    print("–ü—Ä–µ–¥–º–µ—Ç –≤—ã–¥–∞–Ω")






@bot.command()
@has_permissions(administrator = True)
async def inv(ctx):
    opponent = ctx.message.author.id
    with sq.connect('DataBase.db') as con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM users WHERE discord_id = {opponent}")
        record = cur.fetchall()
        if len(record) == 0:
            await ctx.send(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
            con.commit()
            return
        for i in record: #–ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            owner_id = i[0]
        cur.execute(f"SELECT * FROM inv WHERE inv_owner_id = '{owner_id}'")
        record = cur.fetchall()
        for i in record: #–ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            inv_name = i[3]
            inv_type = i[4]
            text = (f"{inv_name} | {inv_type} |  | ")
            await ctx.send(f"{text}")
        con.commit()





@bot.command()
@has_permissions(administrator = True)
async def createguild(ctx, groupname: str):
    groupname = re.sub('[^A-Za-z0-9]+', '', groupname) #—É–±–µ—Ä–∞–µ—Ç –≤—Å–µ –ª–∏—à–Ω–µ–µ –≥–æ–≤–Ω–æ ! - ~/''
    date_registration = datetime.now().date() #–ù—É —Ç—É—Ç —è –±–µ—Ä—É –¥–∞–Ω—É, –∏–º–µ–Ω–Ω–æ –¥–∞—Ç—É –±–µ–∑ —á–∏—Å–ª–∞
    owner = ctx.message.author.id #–ø–æ–ª—É—á–∞—é id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏
    print(f"{datetime.now()} {ctx.message.author} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {groupname}") #–°–µ—Ä—å–µ–∑–Ω–æ? –≠—Ç–æ —Ç–æ–∂–µ?
    #–î–∞–ª—å—à–µ –∏–¥–µ—Ç –∫–æ–¥ –¥–∞—Ç–∞ –±–∞–∑—ã, —è –Ω–µ –¥—É–º–∞—é, —á—Ç–æ —Ç—É—Ç —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—è—Å–Ω—è—Ç—å
    with sq.connect('DataBase.db') as con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM users discord_id WHERE discord_id = {owner} AND groups = 0")
        record = cur.fetchall()
        for i in record:
            race = i[5]
        con.commit()
        if len(record) == 0:
            await ctx.send("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ")
            print(f"{datetime.now()} {ctx.message.author} –Ω–µ —Å–º–æ–≥ –∑–∞—Ä–µ–≥–∞—Ç—å —Å–≤–æ–π –æ—Ç—Ä—è–¥. –¢-–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–º.")
        else:
            guild = ctx.guild 
            await guild.create_role(name=groupname) #–°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
            new_group = get(ctx.guild.roles, name=groupname) #–ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏
            await ctx.message.author.add_roles(new_group) #–¥–æ–±–∞–≤—è–ª–µ–º —á–µ–ª–∞ –≤ —Ä–æ–ª—å

            #–ø–µ—Ä–º–∏—à–∏–æ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                new_group: discord.PermissionOverwrite(read_messages=True)
            }

            #–°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_channel = bot.get_channel(891362588221403206)
            await category_channel.create_text_channel(name=groupname, overwrites=overwrites)
            channel = discord.utils.get(ctx.guild.channels, name =groupname.lower())
            print(f"–ë—ã–ª —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª {channel}")
            channel = channel.id

            #–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø—ã
            with sq.connect('DataBase.db') as con:
                cur = con.cursor()
                cur.execute(f"INSERT INTO groups (owner_id, group_date_registrator, group_name, group_race, group_chat_id) VALUES({owner}, '{date_registration}', '{groupname}', '{race}', {channel})")
                cur.execute(f"SELECT * FROM groups WHERE group_name = '{groupname}'")
                record = cur.fetchall()
                for i in record:
                    id_group = i[0]
                cur.execute(f"UPDATE users SET groups = {id_group} WHERE discord_id = {owner}")
                record = cur.fetchall()                    
                con.commit()

            #–ò–ó–ò –ë–õ–Ø–¢–¨, –ì–û–¢–û–í–û
            await ctx.send("–£—Å–ø–µ—à–Ω–æ")
            print(f"{datetime.now()} {ctx.message.author} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç—Ä—è–¥ {groupname}")






@bot.command()
@has_permissions(administrator = True)
async def ig(ctx, opponent: discord.Member):
    member = ctx.message.author.id #–ø–æ–ª—É—á–∞—é id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏
    print(f"{datetime.now()} {member} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {opponent} –≤ –≥–∏–ª—å–¥–∏—é")
    opponent = opponent.id #–ø–æ–ª—É—á–∞–µ–º id –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    with sq.connect('DataBase.db') as con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM groups WHERE owner_id = {member}") #–ø—Ä–æ–±–∏–≤–∞–µ–º –≥–∏–ª—å–¥–∏—é
        record = cur.fetchall()
        if len(record) == 0:    #–ï—Å–ª–∏ –Ω–µ—Ç—É –∑–∞–ø–∏—Å–µ–π, —Å–æ—Å–∏ –±–æ–±—Ä—É
            await ctx.send(f"–í—ã –Ω–µ –≥–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏")
            con.commit()
            return
        for i in record: #–ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            id_group = i[0]
            owner_id = i[1]
            group_name = i[3]
            group_race = i[4]

        cur.execute(f"SELECT * FROM users WHERE discord_id = {opponent}") #–ø—Ä–æ–±–∏–≤–∞–µ–º –æ–ø–ø–µ–Ω–µ–Ω—Ç–∞ 
        record = cur.fetchall()
        if len(record) == 0:    #–µ—Å–ª–∏ —á–µ–ª–∞ –Ω–µ—Ç—É –Ω–∞ —Å–µ—Ä–µ—Ä–≤–µ - –ø—É—Å—Ç—å —Å–æ—Å–µ—Ç –±–æ–±—Ä—É
            await ctx.send(f"–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            con.commit()
            return
        for i in record: #–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            name = i[3]
            race = i[5]
            groups = i[4]     

        if group_race != race: #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–ª—ã –æ–¥–Ω–æ–π —Ä–∞—Å—ã
            await ctx.send(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫  - –¥—Ä—É–≥–æ–π —Ä–∞—Å—ã, {race}.")
            return
        if groups == id_group: #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–ª —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            await ctx.send(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫  - —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏.")
            return    
        elif groups != 0: #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–ª –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥–∏–ª—å–¥–∏–∏
            await ctx.send(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫  - —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –≥–∏–ª—å–¥–∏–∏.")
            return

        cur.execute(f"UPDATE users SET groups = {id_group} WHERE discord_id = {opponent}") #–º–µ–Ω—è–µ–º id –≥—Ä—É–ø–ø—ã –≤ –¥–∞—Ç–∞ –±–∞–∑–µ
        guildrole = get(ctx.guild.roles, name=group_name) #–ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - —á–µ—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ
        member = ctx.guild.get_member(opponent) #–ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ id
        await member.add_roles(guildrole) #–¥–æ–±–∞–≤—è–ª–µ–º —á–µ–ª–∞ –≤ —Ä–æ–ª—å
        await ctx.send(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫  - –±—ã–ª –¥–æ–±–∞–ª–≤–µ–Ω –≤ –≥–∏–ª—å–¥–∏—é")
        print(f"{datetime.now()} {member} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∏–ª—å–¥–∏—é {guildrole}")
        con.commit() #–∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É





@bot.command()
@has_permissions(administrator = True)
async def say(ctx, *, text):
    message = ctx.message
    await message.delete()
    await ctx.send(text)





@bot.command() # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–∫–æ–π –ª–∏–±–æ —á–∞—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ.
@has_permissions(administrator = True)
async def sayto(ctx, channel:discord.TextChannel, *, text):
    print(f"{datetime.now()} {ctx.message.author}, sayto")
    message = ctx.message
    await message.delete()
    await channel.send(text)





@bot.event
async def on_message(message):
    msg = message.content.lower()
    try:
        message.guild.id == None #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    except AttributeError:
        if msg == "start":

            #–¢—É—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            au_user = message.author
            searchuser = au_user.id
            guild = bot.get_guild(890003889858957382)
            member = guild.get_member(au_user.id)
            emoji = ["üçÄ","üßô","üêâ","üê±"]
            kira = guild.get_member(276766244093296640)
            id_role = [890283323224625212, 890287397978402857, 890282890007568425, 890282541850968115, 890294463849726054]
            date_registr = datetime.now().date()
            command_prefix = str(settings['prefix'])
            #–∑–∞–∫–æ–Ω—á–∏–ª–∏

            #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–ª –Ω–æ–≤–µ–Ω—å–∫–∏–π –∏ –µ–≥–æ –∑–∞–ø–∞—Ö–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ –Ω–∞—à–µ–π –¥–∞—Ç–∞ –±–∞–∑—ã
            with sq.connect('DataBase.db') as con:  
                cur = con.cursor()
                cur.execute(f"SELECT * FROM users discord_id WHERE discord_id = {searchuser}") 
                record = cur.fetchall()
                con.commit()
            if len(record) != 0:
                print(f"{au_user} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                await au_user.send(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–ø–∏—Å–∞–≤ {command_prefix}help')
                return

            #–ü–†–ò–ù–¢ –ò –û–¢–ü–†–ê–í–ö–ê, –ü–†–ò–ö–ò–ù–¨
            print(f"{datetime.now()} –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {au_user}")
            await au_user.send("–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

            #–ë–∞–≥–æ–≤–∞–Ω–Ω–∞—è —Ö—É–π–Ω—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π –Ω–∏–∫ –ø—É—Å—Ç—ã–º
            await au_user.send("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º, –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. (–Ω–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ)")
            def check(msg):
                return msg.author == au_user
            message = await bot.wait_for("message", check=check)
            nick = message.content #—É–±–µ—Ä–∞–µ—Ç –≤—Å–µ –ª–∏—à–Ω–µ–µ –≥–æ–≤–Ω–æ ! - ~/''
            print(f"{datetime.now()} –£–∫–∞–∑–∞–Ω –Ω–∏–∫: {nick}")


            #–í—ã–±–µ—Ä–∞–µ–º —Ä–∞—Å—É
            await au_user.send(f"–•–æ—Ä–æ—à–æ, {nick}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É. (–Ω–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ)")
            rolemessage = await au_user.send("üçÄ –î—Ä–∏–∞–¥—ã\n:mage: –õ—é–¥–∏\n:dragon: –î—Ä–∞–∫–æ–Ω—ã\nüê± –ó–≤–µ—Ä–æ–ª—é–¥–∏")
            #–Ω–∞–∫–∏–¥—ã–≤–∞–µ–º —ç–º–æ–¥–∂–∏, –ø–æ –∫—Ä–∞—Å–æ—Ç–µ
            for i in emoji:
                await rolemessage.add_reaction(i)

            #–ñ–¥–µ–º –ø–æ–∫–∞ —á–µ–ª –Ω–∞–∂–º–µ—Ç –Ω–∞ —ç–º–æ–¥–∂–∏
            def check1(reaction, user):
                return reaction.emoji in emoji and user.id == au_user.id
            reaction, user_reaction = await bot.wait_for('reaction_add', check=check1)
            emoji_post = emoji.index(str(reaction))
            id_role = id_role[emoji_post] # —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∂–∏ –∏ id —Ä–æ–ª–∏
            role = discord.utils.get(guild.roles, id = id_role) #–Ω–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await member.add_roles(role) # –≤—ã–¥–∞–µ–º —Ä–æ–ª—å

            #–ü–†–ò–ù–¢–´!
            print(f"{datetime.now()} –í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—É: {role}")
            await au_user.send(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: {role}")

            if member != kira: #–ò–∑–º–µ–Ω—è–µ–º –Ω–∏–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç –ö–∏—Ä—ã
                newnick = (f"{str(reaction)}{nick}")
                await member.edit(nick=newnick)
                print(f"{datetime.now()} –ù–∏–∫–Ω–µ–π–º –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω —Å {au_user} –Ω–∞ {newnick}")
                
            else:
                print(f"{datetime.now()} {kira} –ø—ã—Ç–∞–ª—Å—è –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è, –Ω–æ –æ–Ω —Å–ª–∏—à–∫–æ–º –∫—Ä—É—Ç–æ–π, —á—Ç–æ –±—ã —è –ø–æ–º–µ–Ω—è–ª –µ–º—É –Ω–∏–∫ :(")

            #–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            await au_user.send(f'{nick}, –í—ã –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±–æ—Ç—É - –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç: "–î–∞')
            def check(msg):
                return msg.author == au_user 
            while True:
                —Å_msg = await bot.wait_for("message", check=check)  #–ñ–¥–µ–º –ø–æ–∫–∞ –∫—É–∫–æ–ª–¥ –¥–∞—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                —Å_msg = —Å_msg.content
                if —Å_msg == "–î–∞" or —Å_msg == "–¥–∞":
                    print(f"{datetime.now()} {au_user} –î–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
                    break
                else:
                    await au_user.send('–í–≤–µ–¥–∏—Ç–µ "–î–∞".\n–ò–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å "')
                    pass

            #–£—Å–µ, —á–µ–ª –¥–∞–ª –≤—Å—é —Ö—É–π–Ω—é, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –≤ –±–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å
            with sq.connect('DataBase.db') as con:
                cur = con.cursor()
                cur.execute(f"INSERT INTO users (discord_id, date_registrator, name, race) VALUES({au_user.id}, '{date_registr}', '{nick}', '{role}')")
                cur.execute(f"INSERT INTO char(user_id) SELECT id FROM users WHERE discord_id = {searchuser}")
                con.commit()

            #–ü—Ä–∏–Ω—Ç—ã!
            await au_user.send(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–ø–∏—Å–∞–≤ {command_prefix}help")
            print(f"{datetime.now()} –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {nick} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
            #–∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É

    if message.author == bot.user:
        return
    else:
        if bot.user in message.mentions:
            await message.channel.send('kira seed started')

    await bot.process_commands(message)



print (f"{datetime.now()} BOT START")
bot.run(settings['token']) #–±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º